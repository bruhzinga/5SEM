create table main_table
(
    id   INTEGER generated by default as identity,
    name nvarchar2(100)
);
create table copy_table
(
    id   INTEGER generated by default as identity,
    name nvarchar2(100)
);

create table journal
(
    datetime date,
    status   nvarchar2(10)
);

declare
    i number := 1 ;
begin
    loop
        insert into main_table(name)
        values (i);
        i := i + 1;
        exit when i > 150;
    end loop;
end;

select *
from main_table;
select *
from copy_table;
select *
from journal;

create or replace package DBMSJOB
as
    procedure create_job;
    procedure backup_job;
    procedure is_running;
    procedure stop_job;
    procedure set_new_date(newDate date);
    procedure delete_job;
end ;


create or replace package body DBMSJOB
as
    procedure create_job as
    begin
        dbms_job.ISUBMIT(job => 1,
                         what => 'begin DBMSJOB.backup_job; end;',
                         next_date => sysdate,
                         interval =>'trunc(sysdate + 7) + 60/86400');
    end;

    procedure backup_job as
    begin
        insert into copy_table select * from main_table where rownum <= 50;
        delete main_table where rownum <= 50;
        insert into journal(datetime, status)
        values (sysdate, 'GOOD');
    exception
        when others then
            insert into journal(datetime, status)
            values (sysdate, 'FAIL');
    end backup_job;
    procedure is_running
        is
        existence USER_JOBS.WHAT%TYPE;
    begin
        select (select WHAT from USER_JOBS where WHAT = 'begin DBMSJOB.backup_job; end;' and BROKEN = 'N')
        into existence
        from dual;
        if existence is not null then
            DBMS_OUTPUT.PUT_LINE('TRUE');
        else
            DBMS_OUTPUT.PUT_LINE('FALSE');
        end if;
    end is_running;
    procedure stop_job
    as
    begin
        DBMS_JOB.BROKEN(1, TRUE);
        COMMIT;
    end stop_job;
----------------------------------------------
    procedure set_new_date(newDate date)
    as
    begin
        DBMS_JOB.CHANGE(job => 1,
                        what => 'DBMSJOB.backup_job; end;',
                        next_date => newDate,
                        interval =>'trunc(sysdate + 7) + 60/86400');
        commit;
    end set_new_date;
---------------------------------------------
    procedure delete_job
    as
    begin
        dbms_job.remove(1);
        commit;
    end delete_job;
end ;



begin
    DBMSJOB.create_job();
    DBMSJOB.IS_RUNNING();
end;

select *
from user_jobs;

begin
    DBMSJOB.stop_job();
end;

begin
    DBMSJOB.set_new_date(sysdate + 1);
end;

begin
    DBMSJOB.delete_job();
end;

begin
    DBMS_JOB.RUN(1);
end;

select *
from main_table;
select *
from copy_table;
select *
from journal;

create or replace package DBMSSHEDULER
as
    procedure create_job;
    procedure backup_job;
    procedure is_running;
    procedure stop_job;
    procedure set_new_date(newDate date);
    procedure delete_job;
end ;

create or replace package body DBMSSHEDULER
as
    procedure backup_job as
    begin
        DBMSJOB.backup_job();
    end;
    procedure create_job as
    begin
        dbms_scheduler.create_schedule(
                schedule_name => 'Schedule',
                start_date => sysdate,
                repeat_interval => 'FREQ=WEEKLY;'
            );
        dbms_scheduler.create_program(
                program_name => 'Backup_program',
                program_type => 'STORED_PROCEDURE',
                program_action => 'DBMSSHEDULER.backup_job',
                number_of_arguments => 0,
                enabled => true
            );
        DBMS_SCHEDULER.CREATE_JOB(
                job_name =>'Backup_Job',
                program_name=>'Backup_program',
                SCHEDULE_NAME=>'Schedule',
                ENABLED=> true
            );
    end;
    procedure is_running as
        existence varchar2(100);
    begin
        select (select JOB_NAME from all_scheduler_jobs where JOB_NAME = 'BACKUP_JOB' and ENABLED = 'TRUE')
        into existence
        from dual;
        if existence is not null then
            DBMS_OUTPUT.PUT_LINE('TRUE');
        else
            DBMS_OUTPUT.PUT_LINE('FALSE');
        end if;

    end;
    procedure stop_job
        is
    begin
        DBMS_SCHEDULER.disable('Backup_Job');
        COMMIT;
    end ;
-------------------------------------------
    procedure delete_job
        is
    begin
        DBMS_SCHEDULER.DROP_JOB(job_name => 'Backup_Job');
        DBMS_SCHEDULER.DROP_SCHEDULE(schedule_name => 'Schedule');
        DBMS_SCHEDULER.DROP_PROGRAM(program_name => 'Backup_program');
        commit;
    end ;
    procedure set_new_date(newDate date)
    as
    begin
        DBMS_SCHEDULER.SET_ATTRIBUTE(
                name=>'Schedule',
                ATTRIBUTE=>'start_date',
                value =>newDate
            );

    end set_new_date;

end ;

begin

    DBMSSHEDULER.is_running();
end;
select *
from all_scheduler_jobs;

begin
    DBMSSHEDULER.stop_job();
end;

begin
    DBMSSHEDULER.set_new_date(sysdate + 1);
end;

begin
    DBMSSHEDULER.delete_job();
end;

grant execute on DBMS_SCHEDULER to SYSTEM;
grant create job to SYSTEM;
select JOB_NAME, ENABLED
from all_scheduler_jobs;
select *
from journal;